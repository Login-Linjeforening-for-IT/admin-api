// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: audiences.sql

package db

import (
	"context"
)

const getAudiencesOfEvent = `-- name: GetAudiencesOfEvent :many
SELECT aud.id, aud.name_no, aud.name_en, aud.description_no, aud.description_en, aud.updated_at, aud.created_at, aud.deleted_at FROM "event_audience_relation"
    INNER JOIN "audience" AS aud ON "event_audience_relation"."audience" = aud."id"
    WHERE "event_audience_relation"."event" = $1::int
`

func (q *Queries) GetAudiencesOfEvent(ctx context.Context, eventID int32) ([]Audience, error) {
	rows, err := q.db.QueryContext(ctx, getAudiencesOfEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Audience{}
	for rows.Next() {
		var i Audience
		if err := rows.Scan(
			&i.ID,
			&i.NameNo,
			&i.NameEn,
			&i.DescriptionNo,
			&i.DescriptionEn,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
