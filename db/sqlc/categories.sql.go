// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: categories.sql

package db

import (
	"context"

	"github.com/guregu/null/zero"
)

const getCategories = `-- name: GetCategories :many
SELECT "id", "color", "name_no", "name_en"
    FROM "category" ORDER BY "id"
`

type GetCategoriesRow struct {
	ID     int32       `json:"id"`
	Color  string      `json:"color"`
	NameNo string      `json:"name_no"`
	NameEn zero.String `json:"name_en"`
}

func (q *Queries) GetCategories(ctx context.Context) ([]GetCategoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCategoriesRow{}
	for rows.Next() {
		var i GetCategoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.Color,
			&i.NameNo,
			&i.NameEn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategory = `-- name: GetCategory :one
SELECT id, color, name_no, name_en, description_no, description_en, updated_at, created_at FROM "category" WHERE "id" = $1::int LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int32) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Color,
		&i.NameNo,
		&i.NameEn,
		&i.DescriptionNo,
		&i.DescriptionEn,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
