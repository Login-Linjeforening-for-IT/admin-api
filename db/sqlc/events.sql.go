// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: events.sql

package db

import (
	"context"
)

const getEvents = `-- name: GetEvents :many
SELECT id, name_no, name_en, description_no, description_en, informational_no, informational_en, time_type, time_start, time_end, time_publish, time_signup_release, time_signup_deadline, canceled, digital, highlight, image_small, image_banner, link_facebook, link_discord, link_signup, link_stream, capacity, "full", category, location, parent, rule, updated_at, created_at FROM "Event"
`

func (q *Queries) GetEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.NameNo,
			&i.NameEn,
			&i.DescriptionNo,
			&i.DescriptionEn,
			&i.InformationalNo,
			&i.InformationalEn,
			&i.TimeType,
			&i.TimeStart,
			&i.TimeEnd,
			&i.TimePublish,
			&i.TimeSignupRelease,
			&i.TimeSignupDeadline,
			&i.Canceled,
			&i.Digital,
			&i.Highlight,
			&i.ImageSmall,
			&i.ImageBanner,
			&i.LinkFacebook,
			&i.LinkDiscord,
			&i.LinkSignup,
			&i.LinkStream,
			&i.Capacity,
			&i.Full,
			&i.Category,
			&i.Location,
			&i.Parent,
			&i.Rule,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
