// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: organizations.sql

package db

import (
	"context"
)

const getOrganizationsOfEvent = `-- name: GetOrganizationsOfEvent :many
SELECT org.shortname, org.name_no, org.name_en, org.description_no, org.description_en, org.link_homepage, org.link_linkedin, org.link_facebook, org.link_instagram, org.logo, org.updated_at, org.created_at, org.deleted_at FROM "event_organization_relation"
    INNER JOIN "organization" AS org ON "event_organization_relation"."organization" = org."shortname"
    WHERE "event_organization_relation"."event" = $1::int
`

func (q *Queries) GetOrganizationsOfEvent(ctx context.Context, eventID int32) ([]Organization, error) {
	rows, err := q.db.QueryContext(ctx, getOrganizationsOfEvent, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Organization{}
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.Shortname,
			&i.NameNo,
			&i.NameEn,
			&i.DescriptionNo,
			&i.DescriptionEn,
			&i.LinkHomepage,
			&i.LinkLinkedin,
			&i.LinkFacebook,
			&i.LinkInstagram,
			&i.Logo,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
