definitions:
  api.addAudienceToEventRequest:
    properties:
      audience:
        minimum: 1
        type: integer
      event:
        minimum: 1
        type: integer
    required:
    - audience
    - event
    type: object
  api.addCityToJobRequest:
    properties:
      city:
        minLength: 1
        type: string
      id:
        minimum: 1
        type: integer
    required:
    - city
    - id
    type: object
  api.addOrganizationToEventRequest:
    properties:
      event:
        minimum: 1
        type: integer
      organization:
        type: string
    required:
    - event
    - organization
    type: object
  api.addSkillToJobRequest:
    properties:
      id:
        minimum: 1
        type: integer
      skill:
        minLength: 1
        type: string
    required:
    - id
    - skill
    type: object
  api.createEventRequest:
    properties:
      canceled:
        type: boolean
      capacity:
        type: integer
      category:
        type: integer
      description_en:
        type: string
      description_no:
        type: string
      digital:
        type: boolean
      full:
        type: boolean
      highlight:
        type: boolean
      image_banner:
        type: string
      image_small:
        type: string
      informational_en:
        type: string
      informational_no:
        type: string
      link_discord:
        type: string
      link_facebook:
        type: string
      link_signup:
        type: string
      link_stream:
        type: string
      location:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
      parent:
        type: integer
      rule:
        type: integer
      time_end:
        type: string
      time_publish:
        type: string
      time_signup_deadline:
        type: string
      time_signup_release:
        type: string
      time_start:
        type: string
      time_type:
        $ref: '#/definitions/db.TimeTypeEnum'
      visible:
        type: boolean
    required:
    - category
    - description_no
    - link_discord
    - link_facebook
    - link_signup
    - name_no
    - time_start
    - time_type
    type: object
  api.createJobRequest:
    properties:
      application_deadline:
        type: string
      application_url:
        type: string
      banner_image:
        type: string
      description_long_en:
        type: string
      description_long_no:
        type: string
      description_short_en:
        type: string
      description_short_no:
        type: string
      highlight:
        type: boolean
      job_type:
        $ref: '#/definitions/db.JobType'
      organization:
        type: string
      position_title_en:
        type: string
      position_title_no:
        type: string
      time_expire:
        type: string
      time_publish:
        type: string
      title_en:
        type: string
      title_no:
        type: string
      visible:
        type: boolean
    required:
    - application_deadline
    - description_long_no
    - description_short_no
    - job_type
    - position_title_no
    - time_expire
    - time_publish
    - title_no
    type: object
  api.createLocationRequest:
    properties:
      address_postcode:
        type: integer
      address_street:
        type: string
      city_name:
        type: string
      coordinate_lat:
        type: number
      coordinate_long:
        type: number
      mazemap_campus_id:
        type: integer
      mazemap_poi_id:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
      type:
        $ref: '#/definitions/db.LocationType'
      url:
        type: string
    required:
    - name_no
    - type
    type: object
  api.createOrganizationRequest:
    properties:
      description_en:
        type: string
      description_no:
        type: string
      link_facebook:
        type: string
      link_homepage:
        type: string
      link_instagram:
        type: string
      link_linkedin:
        type: string
      logo:
        type: string
      name_en:
        type: string
      name_no:
        minLength: 1
        type: string
      shortname:
        minLength: 1
        type: string
      type:
        type: integer
    required:
    - name_no
    - shortname
    type: object
  api.createRuleRequest:
    properties:
      description_en:
        type: string
      description_no:
        type: string
      name_en:
        type: string
      name_no:
        type: string
    required:
    - description_no
    - name_no
    type: object
  api.errorResponse:
    properties:
      error:
        type: string
      status:
        type: integer
      type:
        type: string
    type: object
  api.removeAudienceFromEventRequest:
    properties:
      audience:
        minimum: 1
        type: integer
      event:
        minimum: 1
        type: integer
    required:
    - audience
    - event
    type: object
  api.removeCityFromJobRequest:
    properties:
      city:
        minLength: 1
        type: string
      id:
        minimum: 1
        type: integer
    required:
    - city
    - id
    type: object
  api.removeOrganizationFromEventRequest:
    properties:
      event:
        minimum: 1
        type: integer
      organization:
        type: string
    required:
    - event
    - organization
    type: object
  api.removeSkillFromJobRequest:
    properties:
      id:
        minimum: 1
        type: integer
      skill:
        minLength: 1
        type: string
    required:
    - id
    - skill
    type: object
  api.updateEventRequest:
    properties:
      canceled:
        type: boolean
      capacity:
        type: integer
      category:
        type: integer
      description_en:
        type: string
      description_no:
        type: string
      digital:
        type: boolean
      full:
        type: boolean
      highlight:
        type: boolean
      id:
        type: integer
      image_banner:
        type: string
      image_small:
        type: string
      informational_en:
        type: string
      informational_no:
        type: string
      link_discord:
        type: string
      link_facebook:
        type: string
      link_signup:
        type: string
      link_stream:
        type: string
      location:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
      parent:
        type: integer
      rule:
        type: integer
      time_end:
        type: string
      time_publish:
        type: string
      time_signup_deadline:
        type: string
      time_signup_release:
        type: string
      time_start:
        type: string
      time_type:
        type: string
      visible:
        type: boolean
    required:
    - id
    type: object
  db.Audience:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description_en:
        type: string
      description_no:
        type: string
      id:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
      updated_at:
        type: string
    type: object
  db.Category:
    properties:
      color:
        type: string
      created_at:
        type: string
      description_en:
        type: string
      description_no:
        type: string
      id:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
      updated_at:
        type: string
    type: object
  db.Event:
    properties:
      canceled:
        type: boolean
      capacity:
        type: integer
      category:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      description_en:
        type: string
      description_no:
        type: string
      digital:
        type: boolean
      full:
        type: boolean
      highlight:
        type: boolean
      id:
        type: integer
      image_banner:
        type: string
      image_small:
        type: string
      informational_en:
        type: string
      informational_no:
        type: string
      link_discord:
        type: string
      link_facebook:
        type: string
      link_signup:
        type: string
      link_stream:
        type: string
      location:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
      parent:
        type: integer
      rule:
        type: integer
      time_end:
        type: string
      time_publish:
        type: string
      time_signup_deadline:
        type: string
      time_signup_release:
        type: string
      time_start:
        type: string
      time_type:
        $ref: '#/definitions/db.TimeTypeEnum'
      updated_at:
        type: string
      visible:
        type: boolean
    type: object
  db.GetAddressLocationsRow:
    properties:
      address_postcode:
        type: integer
      address_street:
        type: string
      city_name:
        type: string
      id:
        type: integer
      is_deleted:
        type: boolean
      name_en:
        type: string
      name_no:
        type: string
      updated_at:
        type: string
      url:
        type: string
    type: object
  db.GetAudiencesRow:
    properties:
      id:
        type: integer
      is_deleted:
        type: boolean
      name_en:
        type: string
      name_no:
        type: string
    type: object
  db.GetCategoriesRow:
    properties:
      color:
        type: string
      id:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
    type: object
  db.GetCoordsLocationsRow:
    properties:
      coordinate_lat:
        type: number
      coordinate_long:
        type: number
      id:
        type: integer
      is_deleted:
        type: boolean
      name_en:
        type: string
      name_no:
        type: string
      updated_at:
        type: string
      url:
        type: string
    type: object
  db.GetEventsRow:
    properties:
      audiences:
        items:
          type: string
        type: array
      canceled:
        type: boolean
      capacity:
        type: integer
      category_name_en:
        type: string
      category_name_no:
        type: string
      full:
        type: boolean
      id:
        type: integer
      is_deleted:
        type: boolean
      link_signup:
        type: string
      location_name_en:
        type: string
      location_name_no:
        type: string
      name_en:
        type: string
      name_no:
        type: string
      organizers:
        items:
          type: string
        type: array
      time_end:
        type: string
      time_publish:
        type: string
      time_start:
        type: string
      time_type:
        $ref: '#/definitions/db.TimeTypeEnum'
      updated_at:
        type: string
      visible:
        type: boolean
    type: object
  db.GetJobRow:
    properties:
      application_deadline:
        type: string
      application_url:
        type: string
      banner_image:
        type: string
      cities:
        items:
          type: string
        type: array
      created_at:
        type: string
      deleted_at:
        type: string
      description_long_en:
        type: string
      description_long_no:
        type: string
      description_short_en:
        type: string
      description_short_no:
        type: string
      highlight:
        type: boolean
      id:
        type: integer
      job_type:
        $ref: '#/definitions/db.JobType'
      name_en:
        type: string
      name_no:
        type: string
      organization:
        type: string
      position_title_en:
        type: string
      position_title_no:
        type: string
      shortname:
        type: string
      skills:
        items:
          type: string
        type: array
      time_expire:
        type: string
      time_publish:
        type: string
      title_en:
        type: string
      title_no:
        type: string
      updated_at:
        type: string
      visible:
        type: boolean
    type: object
  db.GetJobsRow:
    properties:
      application_deadline:
        type: string
      application_url:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      is_deleted:
        type: boolean
      job_type:
        $ref: '#/definitions/db.JobType'
      name_en:
        type: string
      name_no:
        type: string
      position_title_en:
        type: string
      position_title_no:
        type: string
      time_publish:
        type: string
      title_en:
        type: string
      title_no:
        type: string
      updated_at:
        type: string
      visible:
        type: boolean
    type: object
  db.GetLocationsRow:
    properties:
      address_postcode:
        type: integer
      address_street:
        type: string
      city_name:
        type: string
      coordinate_lat:
        type: number
      coordinate_long:
        type: number
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      is_deleted:
        type: boolean
      mazemap_campus_id:
        type: integer
      mazemap_poi_id:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
      type:
        $ref: '#/definitions/db.LocationType'
      updated_at:
        type: string
      url:
        type: string
    type: object
  db.GetMazemapLocationsRow:
    properties:
      id:
        type: integer
      is_deleted:
        type: boolean
      mazemap_campus_id:
        type: integer
      mazemap_poi_id:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
      updated_at:
        type: string
      url:
        type: string
    type: object
  db.GetOrganizationsOfEventRow:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description_en:
        type: string
      description_no:
        type: string
      is_deleted:
        type: boolean
      link_facebook:
        type: string
      link_homepage:
        type: string
      link_instagram:
        type: string
      link_linkedin:
        type: string
      logo:
        type: string
      name_en:
        type: string
      name_no:
        type: string
      shortname:
        type: string
      type:
        type: integer
      updated_at:
        type: string
    type: object
  db.GetOrganizationsRow:
    properties:
      is_deleted:
        type: boolean
      link_homepage:
        type: string
      logo:
        type: string
      name_en:
        type: string
      name_no:
        type: string
      shortname:
        type: string
      updated_at:
        type: string
    type: object
  db.GetRulesRow:
    properties:
      id:
        type: integer
      is_deleted:
        type: boolean
      name_en:
        type: string
      name_no:
        type: string
    type: object
  db.JobType:
    enum:
    - full
    - part
    - summer
    - verv
    type: string
    x-enum-varnames:
    - JobTypeFull
    - JobTypePart
    - JobTypeSummer
    - JobTypeVerv
  db.Location:
    properties:
      address_postcode:
        type: integer
      address_street:
        type: string
      city_name:
        type: string
      coordinate_lat:
        type: number
      coordinate_long:
        type: number
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      mazemap_campus_id:
        type: integer
      mazemap_poi_id:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
      type:
        $ref: '#/definitions/db.LocationType'
      updated_at:
        type: string
      url:
        type: string
    type: object
  db.LocationType:
    enum:
    - mazemap
    - coords
    - address
    - none
    type: string
    x-enum-varnames:
    - LocationTypeMazemap
    - LocationTypeCoords
    - LocationTypeAddress
    - LocationTypeNone
  db.Organization:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description_en:
        type: string
      description_no:
        type: string
      link_facebook:
        type: string
      link_homepage:
        type: string
      link_instagram:
        type: string
      link_linkedin:
        type: string
      logo:
        type: string
      name_en:
        type: string
      name_no:
        type: string
      shortname:
        type: string
      type:
        type: integer
      updated_at:
        type: string
    type: object
  db.Rule:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      description_en:
        type: string
      description_no:
        type: string
      id:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
      updated_at:
        type: string
    type: object
  db.TimeTypeEnum:
    enum:
    - default
    - no_end
    - whole_day
    - tbd
    type: string
    x-enum-varnames:
    - TimeTypeEnumDefault
    - TimeTypeEnumNoEnd
    - TimeTypeEnumWholeDay
    - TimeTypeEnumTbd
  db.UpdateJobParams:
    properties:
      application_deadline:
        type: string
      application_url:
        type: string
      banner_image:
        type: string
      description_long_en:
        type: string
      description_long_no:
        type: string
      description_short_en:
        type: string
      description_short_no:
        type: string
      highlight:
        type: boolean
      id:
        type: integer
      job_type:
        type: string
      organization:
        type: string
      position_title_en:
        type: string
      position_title_no:
        type: string
      time_expire:
        type: string
      time_publish:
        type: string
      title_en:
        type: string
      title_no:
        type: string
      visible:
        type: boolean
    type: object
  db.UpdateLocationParams:
    properties:
      address_postcode:
        type: integer
      address_street:
        type: string
      city_name:
        type: string
      coordinate_lat:
        type: number
      coordinate_long:
        type: number
      id:
        type: integer
      mazemap_campus_id:
        type: integer
      mazemap_poi_id:
        type: integer
      name_en:
        type: string
      name_no:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  db.UpdateOrganizationParams:
    properties:
      description_en:
        type: string
      description_no:
        type: string
      link_facebook:
        type: string
      link_homepage:
        type: string
      link_instagram:
        type: string
      link_linkedin:
        type: string
      logo:
        type: string
      name_en:
        type: string
      name_no:
        type: string
      shortname:
        type: string
      type:
        type: integer
    type: object
  images.FileDetails:
    properties:
      filepath:
        type: string
      name:
        type: string
      size:
        type: integer
    type: object
  service.EventDetails:
    properties:
      audiences:
        items:
          $ref: '#/definitions/db.Audience'
        type: array
      category:
        $ref: '#/definitions/db.Category'
      event:
        $ref: '#/definitions/db.Event'
      location:
        $ref: '#/definitions/db.Location'
      organizations:
        items:
          $ref: '#/definitions/db.GetOrganizationsOfEventRow'
        type: array
      rule:
        $ref: '#/definitions/db.Rule'
    type: object
info:
  contact: {}
paths:
  /audiences:
    get:
      description: Get all audiences
      operationId: get-audiences
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.GetAudiencesRow'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get all audiences
      tags:
      - audiences
  /audiences/{id}:
    get:
      description: Get audience by ID
      operationId: get-audience
      parameters:
      - in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Audience'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get audience by ID
      tags:
      - audiences
  /categories:
    get:
      description: Get all categories
      operationId: get-categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.GetCategoriesRow'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get all categories
      tags:
      - categories
  /cities:
    get:
      description: Get all cities
      operationId: get-all-cities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get all cities
      tags:
      - cities
  /events:
    get:
      description: Get all events
      operationId: get-events
      parameters:
      - in: query
        name: historical
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.GetEventsRow'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get all events
      tags:
      - events
    patch:
      consumes:
      - application/json
      description: Update event
      operationId: update-event
      parameters:
      - description: Event parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/api.updateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Event'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Foreign key violation
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Update event
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create event
      operationId: create-event
      parameters:
      - description: Event parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/api.createEventRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.Event'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Foreign key violation
          schema:
            $ref: '#/definitions/api.errorResponse'
        "409":
          description: Event already exists
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Create event
      tags:
      - events
  /events/{id}:
    delete:
      description: Delete event by ID
      operationId: delete-event
      parameters:
      - in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Event'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Delete event by ID
      tags:
      - events
    get:
      description: Get event by ID
      operationId: get-event
      parameters:
      - in: path
        minimum: 1
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.EventDetails'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get event by ID
      tags:
      - events
  /events/audiences:
    delete:
      consumes:
      - application/json
      description: Remove audience from event
      operationId: remove-audience-from-event
      parameters:
      - description: Audience parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/api.removeAudienceFromEventRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Remove audience from event
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Add audience to event
      operationId: add-audience-to-event
      parameters:
      - description: Audience parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/api.addAudienceToEventRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Foreign key violation
          schema:
            $ref: '#/definitions/api.errorResponse'
        "409":
          description: Audience already exists
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Add audience to event
      tags:
      - events
  /events/organizations:
    delete:
      consumes:
      - application/json
      description: Remove organization from event
      operationId: remove-organization-from-event
      parameters:
      - description: Organization parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/api.removeOrganizationFromEventRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Remove organization from event
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Add organization to event
      operationId: add-organization-to-event
      parameters:
      - description: Organization parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/api.addOrganizationToEventRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Foreign key violation
          schema:
            $ref: '#/definitions/api.errorResponse'
        "409":
          description: Organization already exists
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Add organization to event
      tags:
      - events
  /images/events/banner:
    get:
      description: Get a list of events banner
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/images.FileDetails'
            type: array
      summary: Get a list of events banner
      tags:
      - images
    post:
      description: Post a event banner
      parameters:
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Post a event banner
      tags:
      - images
  /images/events/small:
    get:
      description: Get a list of small event images
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/images.FileDetails'
            type: array
      summary: Get a list of small event images
      tags:
      - images
    post:
      description: Post a small event image
      parameters:
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Post a small event image
      tags:
      - images
  /images/jobs:
    get:
      description: Get a list of job images
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/images.FileDetails'
            type: array
      summary: Get a list of job images
      tags:
      - images
    post:
      description: Post a job image
      parameters:
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Post a job image
      tags:
      - images
  /images/organizations:
    get:
      description: Get a list of organization images
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/images.FileDetails'
            type: array
      summary: Get a list of organization images
      tags:
      - images
    post:
      description: Post a organization image
      parameters:
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Post a organization image
      tags:
      - images
  /jobs:
    get:
      description: Get a list of jobs
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.GetJobsRow'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get jobs
      tags:
      - jobs
    patch:
      description: Update a job by ID
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      - description: Job details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.UpdateJobParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.GetJobRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Update job
      tags:
      - jobs
    post:
      description: Create a new job
      parameters:
      - description: Job details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createJobRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.GetJobRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Create job
      tags:
      - jobs
  /jobs/{id}:
    delete:
      description: Delete a job by ID
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.GetJobRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Delete job
      tags:
      - jobs
    get:
      description: Get a job by ID
      parameters:
      - description: Job ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.GetJobRow'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get job
      tags:
      - jobs
  /jobs/cities:
    delete:
      description: Remove a city from a job
      parameters:
      - description: Job ID and city
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.removeCityFromJobRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Remove city from job
      tags:
      - jobs
    post:
      description: Add a city to a job
      parameters:
      - description: Job ID and city
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.addCityToJobRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Add city to job
      tags:
      - jobs
  /jobs/skills:
    post:
      description: Add a skill to a job
      parameters:
      - description: Job ID and skill
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api.addSkillToJobRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Add skill to job
      tags:
      - jobs
  /locations:
    get:
      description: Get a list of locations
      operationId: get-locations
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK - other
          schema:
            items:
              $ref: '#/definitions/db.GetLocationsRow'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get locations
      tags:
      - locations
    patch:
      consumes:
      - application/json
      description: Update a location by ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      - description: Location details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.UpdateLocationParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Update location
      tags:
      - locations
    post:
      consumes:
      - application/json
      description: Create a new location
      parameters:
      - description: Location data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/api.createLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Create location
      tags:
      - locations
  /locations/{id}:
    delete:
      description: Delete a location by ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Delete location
      tags:
      - locations
    get:
      description: Get a location by ID
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get location
      tags:
      - locations
  /organizations:
    get:
      description: Get a list of organizations
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.GetOrganizationsRow'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get organizations
      tags:
      - organizations
    post:
      consumes:
      - application/json
      description: Create a new organization
      parameters:
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/api.createOrganizationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Create organization
      tags:
      - organizations
  /organizations/{shortname}:
    delete:
      description: Delete an organization by shortname
      parameters:
      - description: Shortname
        in: path
        name: shortname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Delete organization
      tags:
      - organizations
    get:
      description: Get an organization by shortname
      parameters:
      - description: Shortname
        in: path
        name: shortname
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get organization
      tags:
      - organizations
    patch:
      consumes:
      - application/json
      description: Update an organization by shortname
      parameters:
      - description: Shortname
        in: path
        name: shortname
        required: true
        type: string
      - description: Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.UpdateOrganizationParams'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Organization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Update organization
      tags:
      - organizations
  /rules:
    get:
      description: Get a list of rules
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/db.GetRulesRow'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get rules
      tags:
      - rules
    post:
      consumes:
      - application/json
      description: Create a new rule
      parameters:
      - description: Parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/api.createRuleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Rule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Create rule
      tags:
      - rules
  /rules/{id}:
    get:
      description: Get a rule by ID
      parameters:
      - description: Rule ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.Rule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.errorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.errorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.errorResponse'
      summary: Get rule
      tags:
      - rules
swagger: "2.0"
